Week-1 Introduction to Database System


Data VS Information

Data:
•	Definition: Raw and unprocessed facts or figures that lack context or meaning.
•	Nature: Can be in the form of text, numbers, dates, symbols, etc.
•	Characteristics: Unorganized, random, and incoherent until processed.
•	Role: Acts as the basic building blocks for information.

Information:
•	Definition: The result of processing and organizing data to give it context, meaning, and relevance.
•	Nature: Output that answers questions like "Who," "What," "Where," and "When."
•	Characteristics: Meaningful, organized, and useful for decision-making.
•	Role: Forms the basis of knowledge, crucial for informed decision-making.


Data Redundancy:
Data redundancy happens when the same information is stored in multiple places. It can lead to increased storage needs, inconsistencies, and complexity. Strategies to reduce redundancy include normalization, using unique identifiers, integrating data sources, and ensuring regular maintenance.


Data Repetition:
Data repetition occurs when the same piece of information is repeated or duplicated within a dataset or system. This repetition can lead to inefficiencies, increased storage requirements, and challenges in maintaining consistency. Minimizing data repetition is essential for optimizing storage space and ensuring that updates are applied consistently across the dataset.


Data Anomalies:
Data Anomalies are problem sin datasets that can happen when adding, updating or deleting information.

For example,
--> You might have trouble adding new data without including unnecessary detail, updating one part of the data could cause inconsistencies, or deleting something might unintentionally remove important information.

Handling these Anomalies carefully ensures data remains accurate and reliable.

There are 3 main types of data anomalies that can occur in a database:
1. Modification Anomalies
2. Insertion Anomalies
3. Deletion Anomalies

1. Modification (update) Anomalies:
This anomalies arise when updating data in one part of the database cause inconsistencies or errors in other parts.

For example,
--> If updating a students's address in one record doesn't automatically update it in another related record.

2. Insertion Anomalies:
This usually occurs when you can't add new data to thr database without including unnecessary information.

For example,
--> If you can't add new course without assigning it to a student.

3. Deletion Anomalies:
It occurs when deleting certain data unintentionally, removes other necessary.

For example,
--> Deleting a course record may unintentionally removes information about a student enrolled in that course.


Handling these anomalies carefully is important for maintaining accurate and reliable data in a database.


Databases:
A database is like a well-organized storage space for information.
Imagine it as a central hub where all your important data is kept in an orderly way. When you update something in this hub, it automatically updates everywhere else it's used. This helps prevent messy mistakes and makes information easy to find. Additionally, this also allows different parts of business to use and update the same information at the same time.

Benefits Of Database Implementations:

1. Elimination of data redundancy:
--> Avoid unnecessary repetition of the same information and promotes efficiency.

2. Elimination of data repetition:
--> Minimizes the duplication of data, ensuring consistency.

3. Space Efficiency:
-->Stores large amounts of data without requiring much physical space.

4. Decision Support:
--> Facilitates both tactical and strategic decision-making processes.

5. Operational Support:
--> Supports day-to-day business operations through production and transactions.

6. Enhanced Information retrieved:
--> extracts more valuable information from the same data through relational structure.

7. Data Sharing:
--> Enables Sharing of data across various departments or system.

8. Data Security:
--> Ensures that only authorized users have access to sensitive Information.

9. Software Independence:
--> Allows restructuring of the database without necessitating updates to the software.


Database Management Systems

A database management system is a collection of programs that manages a database structure and controls access to the database (and ultimately the data).  The database is just one of those programs in the collection.

For Now I will be using Oracle DBMS which comprised of Oracle12c (Data Server) and SQL Developer (User Interface and Access tool).

The database management system typically has many components that:

•	manages the sharing of data amongst multiple applications and/or users
•	ensures data consistency
•	add the ability to do ad hoc querying
•	are extensions to the manufactured components to add addition and customized access and usage .


Database Design:

Database design involves creating a blueprint that outlines how data will be organized, structured, and stored in a database system. It is a crucial step in ensuring that the database can efficiently and effectively meet the needs of an organization.

database design should be:

1. Define Usage expectations:
    clearly outline how the database is expected to be used.

2. Avoid Redundancy:
    Helps to prevent the storage of redundance and repetitive data.

3. Integrate database with SDLC & DBLC:
    Align with both the software Development Life Cycle (SDLC) & the Database Design Life Cycle (DBLC).

5 Basic Rules of Good Database Design:

1. Unique Identifiers:
Every table or entity should have a unique identifier to pinpoint specific rows.

2. Avoid Redundant Data Storage:
Minimize duplication of data to enhance efficiency.

3. Avoid Repetitive Data Storage:
Steer clear of unnecessary repetition in data storage.

4. No Calculated Fields:
Exclude calculated fields or values directly derived from other fields.

5. Atomic Values:
Ensure that every cell in the database holds a single, indivisible value.


Databases Development Life Cycle
--> SDLC - Software Development Life cycle

1. Planning:
    Determine the need for software, identify project goals and establish project champions.

2. Analysis (SDLC):
    Evaluate the feasibility of software development, assess team capabilities, and determine financial viability.

3. Design (SDLC):
    Develop specifications, architecture, and design elements for the software.

4. Implementation (SDLC):
    Code the software, test it, and deliver the final product.

5. Maintenance and Support (SDLC):
    Develop plans for ongoing maintenance, monitor performance, and provide support.


Database Development Life Cycle

1. Requirements Analysis:
    Identify The needs for database.

2. Logical Design
    Develop Design specifications
        •	Data Modeling 
        •	Entity Relational Diagram
        •	Data types
        •	normalization


3. Physical design
    Translate the logical design into the actual database structure.


4. Implementation:
    Add data to database, set it on live servers, create backups, make sure it runs properly and smoothly every time.


5. Monitoring, Modifying and maintaining